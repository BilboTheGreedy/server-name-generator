{{template "admin" .}}

{{define "title"}}Manage Reservations{{end}}

{{define "content"}}
<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Manage Server Names</h1>
        <button class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded shadow"
                hx-get="/admin/reservations"
                hx-target="#reservations-table-body"
                hx-swap="innerHTML"
                hx-indicator="#loading-indicator">
            <span class="htmx-indicator" id="loading-indicator">
                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </span>
            Refresh
        </button>
    </div>
    
    <!-- Filters -->
    <div class="bg-white rounded-lg shadow p-6 mb-6">
        <h2 class="text-lg font-semibold mb-4">Filters</h2>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label for="filter-status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select id="filter-status" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                        hx-on:change="filterReservations()">
                    <option value="">All</option>
                    <option value="reserved">Reserved</option>
                    <option value="committed">Committed</option>
                </select>
            </div>
            
            <div>
                <label for="filter-environment" class="block text-sm font-medium text-gray-700 mb-1">Environment</label>
                <select id="filter-environment" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                        hx-on:change="filterReservations()">
                    <option value="">All</option>
                    {{range .Data.Environments}}
                    <option value="{{.}}">{{.}}</option>
                    {{end}}
                </select>
            </div>
            
            <div>
                <label for="filter-region" class="block text-sm font-medium text-gray-700 mb-1">Region</label>
                <select id="filter-region" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                        hx-on:change="filterReservations()">
                    <option value="">All</option>
                    {{range .Data.Regions}}
                    <option value="{{.}}">{{.}}</option>
                    {{end}}
                </select>
            </div>
            
            <div>
                <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                <input type="text" id="search" class="w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" 
                       placeholder="Search server names..."
                       hx-on:input="filterReservations()" hx-trigger="keyup changed delay:500ms">
            </div>
        </div>
    </div>
    
    <!-- Reservations Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Server Name</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Unit Code</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Environment</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="reservations-table-body">
                    {{if .Data.Reservations}}
                        {{range .Data.Reservations}}
                        <tr class="reservation-row" 
                            data-server-name="{{.ServerName}}" 
                            data-status="{{.Status}}" 
                            data-unit-code="{{.UnitCode}}"
                            data-region="{{.Region}}"
                            data-environment="{{.Environment}}">
                            <td class="px-6 py-4 whitespace-nowrap font-mono">{{.ServerName}}</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                {{if eq .Status "reserved"}}
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                    Reserved
                                </span>
                                {{else}}
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                    Committed
                                </span>
                                {{end}}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">{{.UnitCode}}</td>
                            <td class="px-6 py-4 whitespace-nowrap">{{.Type}}</td>
                            <td class="px-6 py-4 whitespace-nowrap">{{.Environment}}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {{formatDate .CreatedAt}}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                {{if eq .Status "reserved"}}
                                <button class="text-green-600 hover:text-green-900 mr-2"
                                        hx-post="/api/commit"
                                        hx-headers='{"Content-Type": "application/json"}'
                                        hx-vals='{"reservationId": "{{.ID}}"}'
                                        hx-swap="none"
                                        hx-trigger="click"
                                        hx-indicator="#loading-indicator-{{.ID}}"
                                        hx-on::after-request="if(event.detail.successful) { document.querySelector('#refreshReservations').click(); }">
                                    <span class="htmx-indicator" id="loading-indicator-{{.ID}}">
                                        <svg class="animate-spin h-4 w-4 text-green-600 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </span>
                                    Commit
                                </button>
                                {{else}}
                                <button class="text-yellow-600 hover:text-yellow-900 mr-2"
                                        hx-post="/api/release"
                                        hx-headers='{"Content-Type": "application/json"}'
                                        hx-vals='{"reservationId": "{{.ID}}"}'
                                        hx-swap="none"
                                        hx-trigger="click"
                                        hx-indicator="#loading-indicator-release-{{.ID}}"
                                        hx-on::after-request="if(event.detail.successful) { document.querySelector('#refreshReservations').click(); }">
                                    <span class="htmx-indicator" id="loading-indicator-release-{{.ID}}">
                                        <svg class="animate-spin h-4 w-4 text-yellow-600 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </span>
                                    Release
                                </button>
                                {{end}}
                                <button class="text-red-600 hover:text-red-900"
                                        hx-delete="/api/reservations/{{.ID}}"
                                        hx-confirm="Are you sure you want to delete this reservation?"
                                        hx-swap="none"
                                        hx-trigger="click"
                                        hx-indicator="#loading-indicator-delete-{{.ID}}"
                                        hx-on::after-request="if(event.detail.successful) { document.querySelector('#refreshReservations').click(); }">
                                    <span class="htmx-indicator" id="loading-indicator-delete-{{.ID}}">
                                        <svg class="animate-spin h-4 w-4 text-red-600 inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </span>
                                    Delete
                                </button>
                            </td>
                        </tr>
                        {{end}}
                    {{else}}
                        <tr>
                            <td colspan="7" class="px-6 py-4 text-center text-gray-500">No reservations found</td>
                        </tr>
                    {{end}}
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Notification -->
<div id="notification" class="fixed top-4 right-4 max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto hidden transform transition-all duration-300 ease-in-out z-50">
  <div class="p-4">
    <div class="flex items-start">
      <div id="notification-icon" class="flex-shrink-0">
        <!-- Icon will be inserted here by JS -->
      </div>
      <div class="ml-3 w-0 flex-1 pt-0.5">
        <p id="notification-message" class="text-sm font-medium text-gray-900"></p>
      </div>
      <div class="ml-4 flex-shrink-0 flex">
        <button type="button" class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500" onclick="document.getElementById('notification').classList.add('hidden')">
          <span class="sr-only">Close</span>
          <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Set up refresh button
        const refreshButton = document.getElementById('refreshReservations');
        if (refreshButton) {
            refreshButton.addEventListener('click', function() {
                // We're using HTMX to handle this now
                htmx.trigger("#reservations-table-body", "refreshTable");
            });
        }
        
        // Listen for HTMX events
        htmx.on('#reservations-table-body', 'refreshTable', function() {
            console.log('Refreshing table...');
            htmx.ajax('GET', '/admin/reservations', '#reservations-table-body');
        });
        
        htmx.on('htmx:afterRequest', function(event) {
            if (event.detail.successful && (
                event.detail.requestConfig.verb === 'POST' || 
                event.detail.requestConfig.verb === 'DELETE'
            )) {
                // Get the endpoint to determine the operation type
                const path = event.detail.requestConfig.path;
                let message = '';
                
                if (path.includes('/commit')) {
                    message = 'Reservation committed successfully';
                } else if (path.includes('/release')) {
                    message = 'Reservation released successfully';
                } else if (path.includes('/reservations/')) {
                    message = 'Reservation deleted successfully';
                } else {
                    message = 'Operation completed successfully';
                }
                
                showNotification(message, 'success');
            } else if (!event.detail.successful) {
                let errorMessage = 'Operation failed';
                
                // Try to get error message from response
                try {
                    const response = JSON.parse(event.detail.xhr.responseText);
                    if (response.error) {
                        errorMessage = response.error;
                    }
                } catch (e) {
                    // If parsing fails, use a generic message
                    errorMessage = `Error: ${event.detail.xhr.status}`;
                }
                
                showNotification(errorMessage, 'error');
            }
        });
        
        // Set up initial environment and region filter options
        populateFilterOptions();
        
        // Get distinct environment and region values
        function populateFilterOptions() {
            const environments = new Set();
            const regions = new Set();
            
            document.querySelectorAll('.reservation-row').forEach(row => {
                const environment = row.getAttribute('data-environment');
                const region = row.getAttribute('data-region');
                
                if (environment) environments.add(environment);
                if (region) regions.add(region);
            });
            
            // Populate environment dropdown
            const environmentSelect = document.getElementById('filter-environment');
            environments.forEach(env => {
                const option = document.createElement('option');
                option.value = env;
                option.textContent = env;
                environmentSelect.appendChild(option);
            });
            
            // Populate region dropdown
            const regionSelect = document.getElementById('filter-region');
            regions.forEach(region => {
                const option = document.createElement('option');
                option.value = region;
                option.textContent = region;
                regionSelect.appendChild(option);
            });
        }
    });
    
    function filterReservations() {
        const statusFilter = document.getElementById('filter-status').value;
        const environmentFilter = document.getElementById('filter-environment').value;
        const regionFilter = document.getElementById('filter-region').value;
        const searchTerm = document.getElementById('search').value.toLowerCase();
        
        document.querySelectorAll('.reservation-row').forEach(row => {
            let visible = true;
            
            // Apply status filter
            if (statusFilter && row.getAttribute('data-status') !== statusFilter) {
                visible = false;
            }
            
            // Apply environment filter
            if (environmentFilter && row.getAttribute('data-environment') !== environmentFilter) {
                visible = false;
            }
            
            // Apply region filter
            if (regionFilter && row.getAttribute('data-region') !== regionFilter) {
                visible = false;
            }
            
            // Apply search filter
            if (searchTerm) {
                const searchableText = row.getAttribute('data-server-name').toLowerCase() + 
                                     row.getAttribute('data-unit-code').toLowerCase();
                
                if (!searchableText.includes(searchTerm)) {
                    visible = false;
                }
            }
            
            // Show or hide the row
            row.style.display = visible ? '' : 'none';
        });
        
        // Check if any rows are visible
        let visibleRows = false;
        document.querySelectorAll('.reservation-row').forEach(row => {
            if (row.style.display !== 'none') {
                visibleRows = true;
            }
        });
        
        // If no rows are visible, show a message
        const noResultsRow = document.getElementById('no-results-row');
        if (!visibleRows) {
            if (!noResultsRow) {
                const tableBody = document.getElementById('reservations-table-body');
                const tr = document.createElement('tr');
                tr.id = 'no-results-row';
                tr.innerHTML = '<td colspan="7" class="px-6 py-4 text-center text-gray-500">No matching reservations found</td>';
                tableBody.appendChild(tr);
            } else {
                noResultsRow.style.display = '';
            }
        } else if (noResultsRow) {
            noResultsRow.style.display = 'none';
        }
    }
    
    function showNotification(message, type) {
        const notification = document.getElementById('notification');
        const notificationMessage = document.getElementById('notification-message');
        const notificationIcon = document.getElementById('notification-icon');
        
        // Set message
        notificationMessage.textContent = message;
        
        // Set icon and color based on type
        if (type === 'success') {
            notificationIcon.innerHTML = '<svg class="h-6 w-6 text-green-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';
            notification.classList.add('bg-green-50');
            notification.classList.remove('bg-red-50', 'bg-yellow-50');
        } else if (type === 'error') {
            notificationIcon.innerHTML = '<svg class="h-6 w-6 text-red-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>';
            notification.classList.add('bg-red-50');
            notification.classList.remove('bg-green-50', 'bg-yellow-50');
        } else {
            notificationIcon.innerHTML = '<svg class="h-6 w-6 text-yellow-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>';
            notification.classList.add('bg-yellow-50');
            notification.classList.remove('bg-green-50', 'bg-red-50');
        }
        
        // Show notification
        notification.classList.remove('hidden');
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
            notification.classList.add('hidden');
        }, 5000);
    }
</script>
{{end}}